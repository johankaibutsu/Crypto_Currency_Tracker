import requests
import pandas as pd
import time
from datetime import datetime
import schedule
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from docx import Document

# API URL for fetching cryptocurrency data
def fetch_crypto_data():
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        "vs_currency": "usd",
        "order": "market_cap_desc",
        "per_page": 50,
        "page": 1,
        "sparkline": False
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        print("Error fetching data:", response.status_code)
        return []

# Perform analysis on the data
def analyze_data(data):
    df = pd.DataFrame(data)
    
    top_5 = df.nlargest(5, 'market_cap')[['name', 'symbol', 'market_cap']]
    avg_price = df['current_price'].mean()
    max_change = df.loc[df['price_change_percentage_24h'].idxmax()][['name', 'symbol', 'price_change_percentage_24h']]
    min_change = df.loc[df['price_change_percentage_24h'].idxmin()][['name', 'symbol', 'price_change_percentage_24h']]
    
    analysis = {
        "Top 5 Cryptos by Market Cap": top_5.to_dict(orient='records'),
        "Average Price of Top 50": avg_price,
        "Highest 24h Price Change": max_change.to_dict(),
        "Lowest 24h Price Change": min_change.to_dict()
    }
    return df, analysis

# Save to Excel
def save_to_excel(df):
    file_name = "crypto_data.xlsx"
    df.to_excel(file_name, index=False)
    print(f"Data saved to {file_name} at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

# Generate analysis report in PDF
def save_analysis_to_pdf(analysis):
    file_name = "crypto_analysis_report.pdf"
    doc = SimpleDocTemplate(file_name, pagesize=letter)
    styles = getSampleStyleSheet()
    
    custom_title_style = ParagraphStyle(name="CustomTitle", parent=styles["Title"], fontSize=18, spaceAfter=20)
    custom_heading_style = ParagraphStyle(name="CustomHeading2", parent=styles["Heading2"], fontSize=14, spaceAfter=10)
    custom_normal_style = ParagraphStyle(name="CustomNormal", parent=styles["Normal"], fontSize=12, spaceAfter=6)

    elements = []

    elements.append(Spacer(1, 2 * inch))
    elements.append(Paragraph("Cryptocurrency Analysis Report", custom_title_style))
    elements.append(Spacer(1, 0.5 * inch))
    elements.append(Paragraph("Generated by Aman Mishra", custom_normal_style))
    elements.append(Paragraph("Generated on: " + datetime.now().strftime('%Y-%m-%d %H:%M:%S'), custom_normal_style))

    elements.append(Spacer(1, 12))
    elements.append(Paragraph("Top 5 Cryptos by Market Cap:", custom_heading_style))
    for crypto in analysis["Top 5 Cryptos by Market Cap"]:
        elements.append(Paragraph(f"{crypto['name']} ({crypto['symbol']}): ${crypto['market_cap']:,}", custom_normal_style))

    elements.append(Spacer(1, 12))
    elements.append(Paragraph("Average Price of Top 50 Cryptos:", custom_heading_style))
    elements.append(Paragraph("${:,.2f}".format(analysis["Average Price of Top 50"]), custom_normal_style))

    elements.append(Spacer(1, 12))
    elements.append(Paragraph("Highest 24h Price Change:", custom_heading_style))
    elements.append(Paragraph(f"{analysis['Highest 24h Price Change']['name']} ({analysis['Highest 24h Price Change']['symbol']}): {analysis['Highest 24h Price Change']['price_change_percentage_24h']:.2f}%", custom_normal_style))

    elements.append(Spacer(1, 12))
    elements.append(Paragraph("Lowest 24h Price Change:", custom_heading_style))
    elements.append(Paragraph(f"{analysis['Lowest 24h Price Change']['name']} ({analysis['Lowest 24h Price Change']['symbol']}): {analysis['Lowest 24h Price Change']['price_change_percentage_24h']:.2f}%", custom_normal_style))

    doc.build(elements)
    print(f"Analysis report saved as {file_name}")
# Generate analysis report in word
def save_analysis_to_word(analysis):
    file_name = "crypto_analysis_report.docx"
    doc = Document()
    doc.add_heading('Cryptocurrency Analysis Report', level=1)
    doc.add_paragraph("Generated by Aman Mishra")
    doc.add_paragraph("Generated on: " + datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    
    doc.add_heading('Top 5 Cryptos by Market Cap', level=2)
    for crypto in analysis["Top 5 Cryptos by Market Cap"]:
        doc.add_paragraph(f"{crypto['name']} ({crypto['symbol']}): ${crypto['market_cap']:,}")
    
    doc.add_heading('Average Price of Top 50 Cryptos', level=2)
    doc.add_paragraph("${:,.2f}".format(analysis["Average Price of Top 50"]))
    
    doc.add_heading('Highest 24h Price Change', level=2)
    doc.add_paragraph(f"{analysis['Highest 24h Price Change']['name']} ({analysis['Highest 24h Price Change']['symbol']}): {analysis['Highest 24h Price Change']['price_change_percentage_24h']:.2f}%")
    
    doc.add_heading('Lowest 24h Price Change', level=2)
    doc.add_paragraph(f"{analysis['Lowest 24h Price Change']['name']} ({analysis['Lowest 24h Price Change']['symbol']}): {analysis['Lowest 24h Price Change']['price_change_percentage_24h']:.2f}%")
    
    doc.save(file_name)
    print(f"Analysis report saved as {file_name}")

# Main function to fetch, analyze, and save data
def update_data():
    print("Fetching data...")
    data = fetch_crypto_data()
    if data:
        df, analysis = analyze_data(data)
        save_to_excel(df)
        save_analysis_to_pdf(analysis)
        save_analysis_to_word(analysis)
    else:
        print("Failed to update data.")

# Schedule the update every 5 minutes
schedule.every(5).minutes.do(update_data)

update_data()

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == "__main__":
    run_scheduler()